{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","togglemode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newtext","toUpperCase","showalert","newtextt","toLowerCase","newtt","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","captilize","msg","App","setalert","setmode","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"sNAMe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,UAAS,yCAAsCD,EAAME,KAAI,eAAOF,EAAME,MAAO,SACpF,sBAAKD,UAAU,kBAAiB,UAE9B,mBAAGA,UAAU,eAAeE,KAAK,IAAG,SAAEH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAmB,SAC7M,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAAwB,UACnE,oBAAIL,UAAU,kCAAiC,SAC7C,oBAAIA,UAAU,WAAU,SACtB,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAG,SAAC,aAWhE,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAAU,UACzF,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BAChG,uBAAOL,UAAU,mBAAkBS,QAAQ,yBAAwB,SAAC,+BAMtE,CCnCe,SAASC,EAASX,GAC/B,IAoCA,EAAqBY,mBAAS,IAAG,mBAA1BC,EAAI,KAACC,EAAO,KACnB,OACE,qCACJ,sBAAKb,UAAU,YAAWc,MAAO,CAACC,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,WAAW,UAC3E,6BAAKF,EAAMiB,UACf,qBAAKhB,UAAU,OAAM,SAEpB,0BAAUA,UAAU,eAAeiB,MAAOL,EAAOM,SAZ3B,SAACC,GACpBC,QAAQC,IAAI,aACZR,EAAQM,EAAMG,OAAOL,MACvB,EAS4EH,MAAO,CAACS,gBAA8B,SAAbxB,EAAME,KAAc,OAAO,QAAQc,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,WAAYI,GAAG,QAAQmB,KAAK,QAExM,wBAAQxB,UAAU,uBAAwBM,QA3BjB,WACrBc,QAAQC,IAAI,yBAAyB,WACrC,IAAII,EAAQb,EAAKc,cACjBb,EAAQY,GACR1B,EAAM4B,UAAU,2BAA2B,UAC7C,EAsBkE,SAAC,yBACrE,wBAAQ3B,UAAU,uBAAuBM,QA9ChB,WACrBc,QAAQC,IAAI,uBACZ,IAAIO,EAAShB,EAAKiB,cAElBhB,EAAQe,GACR7B,EAAM4B,UAAU,2BAA2B,UAC7C,EAwCiE,SAAC,yBACpE,wBAAQ3B,UAAU,uBAAuBM,QAvBhB,WACrBc,QAAQC,IAAI,cAEZR,EADY,IAEZd,EAAM4B,UAAU,eAAe,UACjC,EAkBiE,SAAC,eAEpE,wBAAQ3B,UAAU,uBAAuBM,QA1CtB,WAEf,IAAIwB,EAAOC,SAASC,eAAe,SACnCF,EAAMG,SACNC,UAAUC,UAAUC,UAAUN,EAAMb,OAEpClB,EAAM4B,UAAU,cAAc,UAGhC,EAiC2D,SAAC,iBAE5D,sBAAK3B,UAAU,aAAac,MAAO,CAACC,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,WAAW,UAC/E,6BAAI,iBACJ,8BAAIW,EAAKyB,MAAM,KAAKC,OAAO,cAAY1B,EAAK0B,OAAO,iBACnD,8BAAI,KAAO1B,EAAKyB,MAAM,KAAKC,OAAO,mBAClC,6BAAI,YACJ,4BAAI1B,EAAK0B,OAAO,EAAE1B,EAAK,uCAM3B,CDtBAd,EAAOyC,aAAa,CAChBpC,MAAM,iBACNqC,UAAU,SE9BCC,MAbf,SAAe1C,GAKb,OACCA,EAAM2C,OAAS,sBAAK1C,UAAS,sBAAiBD,EAAM2C,MAAMtC,KAAI,gCAA+BI,KAAK,QAAO,UACxG,iCANc,SAACmC,GACf,IAAMC,EAAMD,EAAKd,cACjB,OAAOe,EAAMC,OAAO,GAAGnB,cAAekB,EAAME,MAAM,EACpD,CAGWC,CAAUhD,EAAM2C,MAAMtC,QAAe,IAAEL,EAAM2C,MAAMM,MAIhE,EC2DeC,MAzDf,WACC,MAAsBtC,mBAAS,MAAK,mBAA9B+B,EAAK,KAACQ,EAAQ,KACnB,EAAoBvC,mBAAS,SAAQ,mBAA/BV,EAAI,KAACkD,EAAO,KAmBVxB,EAAU,SAACyB,EAAQhD,GAE5B8C,EAAS,CACRF,IAAII,EACJhD,KAAKA,IAENiD,YAAW,WAEZH,EAAS,KACR,GAAG,KACA,EAEF,OACE,qCAEJ,cAACpD,EAAM,CAAEK,MAAM,UAAWF,KAAMA,EAAMM,WAhCnB,WAEP,UAAPN,GAEHkD,EAAQ,QACRpB,SAASuB,KAAKxC,MAAMS,gBAAgB,UACpCI,EAAU,qBAAqB,aAI/BwB,EAAQ,SAERpB,SAASuB,KAAKxC,MAAMS,gBAAgB,QACpCI,EAAU,sBAAsB,WAEhC,IAkBD,cAAC,EAAK,CAACe,MAAOA,IACf,qBAAK1C,UAAU,iBAAgB,SAOtB,cAACU,EAAQ,CAACiB,UAAWA,EAAWX,QAAQ,kBAAkBf,KAAMA,QAUzE,EC1DesD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,E,OCHaQ,IAASC,WAAWlC,SAASC,eAAe,SACpDkC,OACH,cAAC,IAAMC,WAAU,UACnB,cAAC,IAAa,UACV,cAAC,EAAG,SASRZ,G","file":"static/js/main.e4951aef.chunk.js","sourcesContent":["import React, {useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className=  {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/About\">{props.aboutText}</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\"htmlFor=\"flexSwitchCheckDefault\">enable dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired, \r\n   aboutText:PropTypes.string.isRequired, \r\n}\r\n\r\nNavbar.defaultProps={\r\n    title:'set title here', \r\n    aboutText:'About'\r\n};\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handlelowerclick=()=>{\r\n    console.log(\" Lower case clicked\");\r\n    let newtextt=text.toLowerCase();\r\n\r\n    setText(newtextt);\r\n    props.showalert(\" Converted to lower case\",\"success\");\r\n  }\r\n  const handlecopy=()=>\r\n  {\r\n    var newtt= document.getElementById(\"mybox\");\r\n    newtt.select();\r\n    navigator.clipboard.writeText(newtt.value);\r\n\r\n    props.showalert(\" TextCopied\",\"success\");\r\n   \r\n\r\n  }\r\n\r\n  const handleUpperclick=()=>{\r\n    console.log(\" uppercase was clicked\",\"success\");\r\n    let newtext=text.toUpperCase();\r\n    setText(newtext);\r\n    props.showalert(\" Converted to Upper case\",\"success\");\r\n  }\r\n  const handleclearclick=()=>{\r\n    console.log(\"clear text\");\r\n    let newtext='';\r\n    setText(newtext);\r\n    props.showalert(\"Text cleared\",\"success\");\r\n  }\r\n  \r\n  const handleonchange=(event)=>{\r\n    console.log(\"on change\");\r\n    setText(event.target.value);\r\n  }\r\n  \r\n  const [text,setText]=useState('');\r\n  return (\r\n    <>\r\n<div className=\"container\"style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n    <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n  \r\n <textarea className=\"form-control\" value={text}  onChange={handleonchange}   style={{backgroundColor: props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"mybox\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-2\"  onClick={handleUpperclick}>Convert to Uppercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handlelowerclick}>convert to LowerCase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleclearclick}>clear text</button>\r\n\r\n<button className=\"btn btn-primary mx-2\" onClick={handlecopy}>copy text</button>\r\n  </div>\r\n  <div className=\"container \" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n    <h1>Text Summary</h1>\r\n    <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n    <p>{0.008 *text.split(\" \").length} Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"enter your text to preview it\"}</p>\r\n\r\n  </div>\r\n \r\n  </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const captilize=(word)=>{\r\n    const lower=word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() +lower.slice(1);\r\n  }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n    <strong>{captilize(props.alert.type)}</strong>:{props.alert.msg} \r\n \r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport About from './component/About';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport { useState } from 'react';\n// import {\n  \n//   Routes,\n//   Route,\n//   Link\n// } from 'react-router-dom';\n\n \nfunction App() {\n const[alert,setalert]=useState(null);\n  const[mode,setmode]=useState('light');\n\n  const togglemode=()=>\n  {\n  if(mode==='light')\n  {\n  setmode('dark');\n  document.body.style.backgroundColor='#042743';\n  showalert(\" Dark mode enabled\",\"success\");\n  }\n  else\n  {\n  setmode('light');\n  \n  document.body.style.backgroundColor='white';\n  showalert(\" Light mode enabled\",\"success\");\n  }\n  }\n\n    const showalert=(message,type)=>\n   {\n setalert({\n  msg:message,\n  type:type\n })\n setTimeout(()=>\n {\nsetalert(null);\n }, 1500);\n    }\n \n  return (\n    <>\n   \n<Navbar  title=\"myworld\"  mode={mode} togglemode={togglemode}/>\n <Alert alert={alert}/>\n<div className=\"container my-3\">\n\n{/* <Routes>\n          <Route exact path=\"/about\" element={<About />} ></Route> */}\n          \n          {/* < Route exact path=\"/\" element= {<TextForm showalert={showalert} heading=\"write something\" mode={mode} /> }> </Route>  */}\n          {/* </Routes> */}\n         <TextForm showalert={showalert} heading=\"write something\" mode={mode} />\n\n          \n</div>\n\n\n\n    </>\n\n  );\n} \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n<BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}